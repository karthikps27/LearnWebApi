// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserDataPump.Models;

namespace UserDataPump.Migrations
{
    [DbContext(typeof(BookItemsDbContext))]
    partial class BookItemsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("UserDataPump.Models.BookAccessInfo", b =>
                {
                    b.Property<int>("AccessInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessViewStatus")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<bool>("Embeddable")
                        .HasColumnType("boolean");

                    b.Property<int?>("EpubId")
                        .HasColumnType("integer");

                    b.Property<int?>("PdfId")
                        .HasColumnType("integer");

                    b.Property<bool>("PublicDomain")
                        .HasColumnType("boolean");

                    b.Property<bool>("QuoteSharingAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("TextToSpeechPermission")
                        .HasColumnType("text");

                    b.Property<string>("Viewability")
                        .HasColumnType("text");

                    b.Property<string>("WebReaderLink")
                        .HasColumnType("text");

                    b.HasKey("AccessInfoId");

                    b.HasIndex("EpubId");

                    b.HasIndex("PdfId");

                    b.ToTable("BookAccessInfos");
                });

            modelBuilder.Entity("UserDataPump.Models.BookAccessInfoListPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookAccessInfoListPrices");
                });

            modelBuilder.Entity("UserDataPump.Models.BookItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("AccessInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Etag")
                        .HasColumnType("text");

                    b.Property<string>("Kind")
                        .HasColumnType("text");

                    b.Property<int?>("SaleInfoSaleId")
                        .HasColumnType("integer");

                    b.Property<int?>("SearchInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("SelfLink")
                        .HasColumnType("text");

                    b.Property<string>("VolumeInfoTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccessInfoId");

                    b.HasIndex("SaleInfoSaleId");

                    b.HasIndex("SearchInfoId");

                    b.HasIndex("VolumeInfoTitle");

                    b.ToTable("BookItems");
                });

            modelBuilder.Entity("UserDataPump.Models.BookSaleInfo", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BuyLink")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<bool>("IsEbook")
                        .HasColumnType("boolean");

                    b.Property<int?>("ListPriceId")
                        .HasColumnType("integer");

                    b.Property<int?>("RetailPriceId")
                        .HasColumnType("integer");

                    b.Property<string>("Saleability")
                        .HasColumnType("text");

                    b.HasKey("SaleId");

                    b.HasIndex("ListPriceId");

                    b.HasIndex("RetailPriceId");

                    b.ToTable("BookSaleInfos");
                });

            modelBuilder.Entity("UserDataPump.Models.BookSearchInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("TextSnippet")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookSearchInfos");
                });

            modelBuilder.Entity("UserDataPump.Models.BookVolumeInfo", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<bool>("AllowAnonLogging")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Authors")
                        .HasColumnType("text[]");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<string>("CanonicalVolumeLink")
                        .HasColumnType("text");

                    b.Property<List<string>>("Categories")
                        .HasColumnType("text[]");

                    b.Property<string>("ContentVersion")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ImageLinksId")
                        .HasColumnType("integer");

                    b.Property<string>("InfoLink")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("MaturityRating")
                        .HasColumnType("text");

                    b.Property<long>("PageCount")
                        .HasColumnType("bigint");

                    b.Property<string>("PreviewLink")
                        .HasColumnType("text");

                    b.Property<string>("PrintType")
                        .HasColumnType("text");

                    b.Property<string>("PublishedDate")
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<long>("RatingsCount")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReadingModesId")
                        .HasColumnType("integer");

                    b.HasKey("Title");

                    b.HasIndex("ImageLinksId");

                    b.HasIndex("ReadingModesId");

                    b.ToTable("BookVolumeInfos");
                });

            modelBuilder.Entity("UserDataPump.Models.Epub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AcsTokenLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Epubs");
                });

            modelBuilder.Entity("UserDataPump.Models.ImageLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SmallThumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageLinks");
                });

            modelBuilder.Entity("UserDataPump.Models.IndustryIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BookVolumeInfoTitle")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookVolumeInfoTitle");

                    b.ToTable("IndustryIdentifiers");
                });

            modelBuilder.Entity("UserDataPump.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BookSaleInfoSaleId")
                        .HasColumnType("integer");

                    b.Property<long>("FinskyOfferType")
                        .HasColumnType("bigint");

                    b.Property<int?>("ListPriceId")
                        .HasColumnType("integer");

                    b.Property<int?>("RetailPriceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookSaleInfoSaleId");

                    b.HasIndex("ListPriceId");

                    b.HasIndex("RetailPriceId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("UserDataPump.Models.OfferListPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AmountInMicros")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OfferListPrices");
                });

            modelBuilder.Entity("UserDataPump.Models.ReadingMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Image")
                        .HasColumnType("boolean");

                    b.Property<bool>("Text")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ReadingModes");
                });

            modelBuilder.Entity("UserDataPump.Models.BookAccessInfo", b =>
                {
                    b.HasOne("UserDataPump.Models.Epub", "Epub")
                        .WithMany()
                        .HasForeignKey("EpubId");

                    b.HasOne("UserDataPump.Models.Epub", "Pdf")
                        .WithMany()
                        .HasForeignKey("PdfId");
                });

            modelBuilder.Entity("UserDataPump.Models.BookItem", b =>
                {
                    b.HasOne("UserDataPump.Models.BookAccessInfo", "AccessInfo")
                        .WithMany()
                        .HasForeignKey("AccessInfoId");

                    b.HasOne("UserDataPump.Models.BookSaleInfo", "SaleInfo")
                        .WithMany()
                        .HasForeignKey("SaleInfoSaleId");

                    b.HasOne("UserDataPump.Models.BookSearchInfo", "SearchInfo")
                        .WithMany()
                        .HasForeignKey("SearchInfoId");

                    b.HasOne("UserDataPump.Models.BookVolumeInfo", "VolumeInfo")
                        .WithMany()
                        .HasForeignKey("VolumeInfoTitle");
                });

            modelBuilder.Entity("UserDataPump.Models.BookSaleInfo", b =>
                {
                    b.HasOne("UserDataPump.Models.BookAccessInfoListPrice", "ListPrice")
                        .WithMany()
                        .HasForeignKey("ListPriceId");

                    b.HasOne("UserDataPump.Models.BookAccessInfoListPrice", "RetailPrice")
                        .WithMany()
                        .HasForeignKey("RetailPriceId");
                });

            modelBuilder.Entity("UserDataPump.Models.BookVolumeInfo", b =>
                {
                    b.HasOne("UserDataPump.Models.ImageLink", "ImageLinks")
                        .WithMany()
                        .HasForeignKey("ImageLinksId");

                    b.HasOne("UserDataPump.Models.ReadingMode", "ReadingModes")
                        .WithMany()
                        .HasForeignKey("ReadingModesId");
                });

            modelBuilder.Entity("UserDataPump.Models.IndustryIdentifier", b =>
                {
                    b.HasOne("UserDataPump.Models.BookVolumeInfo", null)
                        .WithMany("IndustryIdentifiers")
                        .HasForeignKey("BookVolumeInfoTitle");
                });

            modelBuilder.Entity("UserDataPump.Models.Offer", b =>
                {
                    b.HasOne("UserDataPump.Models.BookSaleInfo", null)
                        .WithMany("Offers")
                        .HasForeignKey("BookSaleInfoSaleId");

                    b.HasOne("UserDataPump.Models.OfferListPrice", "ListPrice")
                        .WithMany()
                        .HasForeignKey("ListPriceId");

                    b.HasOne("UserDataPump.Models.OfferListPrice", "RetailPrice")
                        .WithMany()
                        .HasForeignKey("RetailPriceId");
                });
#pragma warning restore 612, 618
        }
    }
}
